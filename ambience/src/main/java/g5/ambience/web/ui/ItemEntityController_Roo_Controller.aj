// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package g5.ambience.web.ui;

import g5.ambience.BundleEntity;
import g5.ambience.ItemEntity;
import g5.ambience.web.ui.ItemEntityController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ItemEntityController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ItemEntityController.create(@Valid ItemEntity itemEntity, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, itemEntity);
            return "itementitys/create";
        }
        uiModel.asMap().clear();
        itemEntity.persist();
        return "redirect:/itementitys/" + encodeUrlPathSegment(itemEntity.getItemId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ItemEntityController.createForm(Model uiModel) {
        populateEditForm(uiModel, new ItemEntity());
        return "itementitys/create";
    }
    
    @RequestMapping(value = "/{itemId}", produces = "text/html")
    public String ItemEntityController.show(@PathVariable("itemId") Integer itemId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("itementity", ItemEntity.findItemEntity(itemId));
        uiModel.addAttribute("itemId", itemId);
        return "itementitys/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String ItemEntityController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("itementitys", ItemEntity.findItemEntityEntries(firstResult, sizeNo));
            float nrOfPages = (float) ItemEntity.countItemEntitys() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("itementitys", ItemEntity.findAllItemEntitys());
        }
        addDateTimeFormatPatterns(uiModel);
        return "itementitys/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ItemEntityController.update(@Valid ItemEntity itemEntity, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, itemEntity);
            return "itementitys/update";
        }
        uiModel.asMap().clear();
        itemEntity.merge();
        return "redirect:/itementitys/" + encodeUrlPathSegment(itemEntity.getItemId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{itemId}", params = "form", produces = "text/html")
    public String ItemEntityController.updateForm(@PathVariable("itemId") Integer itemId, Model uiModel) {
        populateEditForm(uiModel, ItemEntity.findItemEntity(itemId));
        return "itementitys/update";
    }
    
    @RequestMapping(value = "/{itemId}", method = RequestMethod.DELETE, produces = "text/html")
    public String ItemEntityController.delete(@PathVariable("itemId") Integer itemId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        ItemEntity itemEntity = ItemEntity.findItemEntity(itemId);
        itemEntity.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/itementitys";
    }
    
    void ItemEntityController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("itemEntity_releaseyear_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void ItemEntityController.populateEditForm(Model uiModel, ItemEntity itemEntity) {
        uiModel.addAttribute("itemEntity", itemEntity);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("bundleentitys", BundleEntity.findAllBundleEntitys());
    }
    
    String ItemEntityController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
